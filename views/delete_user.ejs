<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Удаление пользователя - soundy</title>
    <style>
        body {
            background: #121212;
            color: #fff;
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            overflow: hidden;
            position: relative;
        }
        
        /* Анимированный фон */
        .animated-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
            pointer-events: none;
        }
        
        .delete-container {
            background: rgba(30, 30, 30, 0.95);
            padding: 40px;
            border-radius: 12px;
            box-shadow: 0 0 30px rgba(0,0,0,0.8);
            width: 350px;
            text-align: center;
            position: relative;
            z-index: 10;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        input[type="email"] {
            width: 90%;
            padding: 10px;
            margin: 10px 0;
            border-radius: 6px;
            border: none;
            background: rgba(255, 255, 255, 0.1);
            color: #fff;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        input[type="email"]::placeholder {
            color: rgba(255, 255, 255, 0.6);
        }
        
        button {
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            background-color: #ff5500;
            color: white;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
            transition: all 0.3s ease;
        }
        
        button:hover {
            background-color: #ff3300;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 85, 0, 0.4);
        }
        
        .error {
            color: #ff4444;
            margin-bottom: 10px;
            background: rgba(255, 68, 68, 0.1);
            padding: 10px;
            border-radius: 6px;
            border: 1px solid rgba(255, 68, 68, 0.3);
        }
        
        .success {
            color: #44ff44;
            margin-bottom: 10px;
            background: rgba(68, 255, 68, 0.1);
            padding: 10px;
            border-radius: 6px;
            border: 1px solid rgba(68, 255, 68, 0.3);
        }
        
        .back-btn {
            position: fixed;
            top: 20px;
            left: 20px;
            padding: 10px 20px;
            border: none;
            border-radius: 6px;
            background-color: #ff5500;
            color: white;
            cursor: pointer;
            font-size: 16px;
            z-index: 1000;
            transition: all 0.3s ease;
            text-decoration: none;
        }
        
        .back-btn:hover {
            background-color: #ff3300;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 85, 0, 0.4);
        }
        
        h2 {
            margin-bottom: 30px;
            color: #fff;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
        }
    </style>
</head>
<body>
    <!-- Анимированный фон -->
    <canvas class="animated-bg" id="animatedBg"></canvas>
    
    <div class="delete-container">
        <h2>Удаление пользователя</h2>
        <% if (error) { %>
            <div class="error"><%= error %></div>
        <% } %>
        <% if (success) { %>
            <div class="success"><%= success %></div>
        <% } %>
        <form method="POST" action="/delete-user">
            <input type="email" name="email" placeholder="Email пользователя" required><br>
            <button type="submit">Удалить пользователя</button>
        </form>
    </div>
    <a href="/" class="back-btn">На главную</a>

    <script>
        // Настройка анимированного фона
        const canvas = document.getElementById('animatedBg');
        const ctx = canvas.getContext('2d');
        
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        
        // Массив для хранения частиц
        const particles = [];
        const particleCount = 100;
        const connectionDistance = 150;
        
        // Класс частицы
        class Particle {
            constructor() {
                this.x = Math.random() * canvas.width;
                this.y = Math.random() * canvas.height;
                this.vx = (Math.random() - 0.5) * 2;
                this.vy = (Math.random() - 0.5) * 2;
                this.size = Math.random() * 3 + 1;
                this.opacity = Math.random() * 0.5 + 0.3;
            }
            
            update() {
                this.x += this.vx;
                this.y += this.vy;
                
                // Отражение от границ
                if (this.x < 0 || this.x > canvas.width) this.vx = -this.vx;
                if (this.y < 0 || this.y > canvas.height) this.vy = -this.vy;
                
                // Небольшие случайные изменения скорости для хаотичности
                this.vx += (Math.random() - 0.5) * 0.02;
                this.vy += (Math.random() - 0.5) * 0.02;
                
                // Ограничение скорости
                const maxSpeed = 3;
                if (Math.abs(this.vx) > maxSpeed) this.vx = this.vx > 0 ? maxSpeed : -maxSpeed;
                if (Math.abs(this.vy) > maxSpeed) this.vy = this.vy > 0 ? maxSpeed : -maxSpeed;
            }
            
            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fillStyle = `rgba(255, 85, 0, ${this.opacity})`;
                ctx.fill();
            }
        }
        
        // Создание частиц
        for (let i = 0; i < particleCount; i++) {
            particles.push(new Particle());
        }
        
        // Функция для рисования линий между близкими частицами
        function drawConnections() {
            for (let i = 0; i < particles.length; i++) {
                for (let j = i + 1; j < particles.length; j++) {
                    const dx = particles[i].x - particles[j].x;
                    const dy = particles[i].y - particles[j].y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    
                    if (distance < connectionDistance) {
                        const opacity = (1 - distance / connectionDistance) * 0.3;
                        ctx.beginPath();
                        ctx.moveTo(particles[i].x, particles[i].y);
                        ctx.lineTo(particles[j].x, particles[j].y);
                        ctx.strokeStyle = `rgba(255, 85, 0, ${opacity})`;
                        ctx.lineWidth = 1;
                        ctx.stroke();
                    }
                }
            }
        }
        
        // Главный цикл анимации
        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Обновление и рисование частиц
            particles.forEach(particle => {
                particle.update();
                particle.draw();
            });
            
            // Рисование соединений
            drawConnections();
            
            requestAnimationFrame(animate);
        }
        
        // Обработка изменения размера окна
        window.addEventListener('resize', () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        });
        
        // Запуск анимации
        animate();
        
        // Добавление интерактивности - частицы реагируют на мышь
        let mouse = { x: 0, y: 0 };
        
        document.addEventListener('mousemove', (e) => {
            mouse.x = e.clientX;
            mouse.y = e.clientY;
            
            // Притягивание частиц к мыши
            particles.forEach(particle => {
                const dx = mouse.x - particle.x;
                const dy = mouse.y - particle.y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                if (distance < 100) {
                    const force = (100 - distance) / 100 * 0.03;
                    particle.vx += dx / distance * force;
                    particle.vy += dy / distance * force;
                }
            });
        });
    </script>
</body>
</html>